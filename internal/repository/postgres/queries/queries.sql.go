// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: queries.sql

package queries

import (
	"context"
)

const insertLink = `-- name: InsertLink :execrows
INSERT INTO links (hash, original_url, correlation_id)
VALUES ($1, $2, $3)
ON CONFLICT (hash) DO NOTHING
`

type InsertLinkParams struct {
	Hash          string
	OriginalUrl   string
	CorrelationID string
}

// InsertLink
//
//	INSERT INTO links (hash, original_url, correlation_id)
//	VALUES ($1, $2, $3)
//	ON CONFLICT (hash) DO NOTHING
func (q *Queries) InsertLink(ctx context.Context, arg InsertLinkParams) (int64, error) {
	result, err := q.db.Exec(ctx, insertLink, arg.Hash, arg.OriginalUrl, arg.CorrelationID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const selectLink = `-- name: SelectLink :one
SELECT
	original_url,
	correlation_id
FROM links
WHERE hash = $1
`

type SelectLinkRow struct {
	OriginalUrl   string
	CorrelationID string
}

// SelectLink
//
//	SELECT
//		original_url,
//		correlation_id
//	FROM links
//	WHERE hash = $1
func (q *Queries) SelectLink(ctx context.Context, hash string) (SelectLinkRow, error) {
	row := q.db.QueryRow(ctx, selectLink, hash)
	var i SelectLinkRow
	err := row.Scan(&i.OriginalUrl, &i.CorrelationID)
	return i, err
}
