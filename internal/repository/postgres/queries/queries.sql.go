// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: queries.sql

package queries

import (
	"context"
)

const insertLink = `-- name: InsertLink :execrows
INSERT INTO links (hash, original_url, correlation_id, user_id)
VALUES ($1, $2, $3, $4)
ON CONFLICT (hash) DO NOTHING
`

type InsertLinkParams struct {
	Hash          string
	OriginalUrl   string
	CorrelationID string
	UserID        string
}

// InsertLink
//
//	INSERT INTO links (hash, original_url, correlation_id, user_id)
//	VALUES ($1, $2, $3, $4)
//	ON CONFLICT (hash) DO NOTHING
func (q *Queries) InsertLink(ctx context.Context, arg InsertLinkParams) (int64, error) {
	result, err := q.db.Exec(ctx, insertLink,
		arg.Hash,
		arg.OriginalUrl,
		arg.CorrelationID,
		arg.UserID,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const markLinksAsDeleted = `-- name: MarkLinksAsDeleted :exec
UPDATE links
SET is_deleted = true
WHERE user_id = $1 AND hash = ANY($2::text[])
`

type MarkLinksAsDeletedParams struct {
	UserID string
	Hashes []string
}

// MarkLinksAsDeleted
//
//	UPDATE links
//	SET is_deleted = true
//	WHERE user_id = $1 AND hash = ANY($2::text[])
func (q *Queries) MarkLinksAsDeleted(ctx context.Context, arg MarkLinksAsDeletedParams) error {
	_, err := q.db.Exec(ctx, markLinksAsDeleted, arg.UserID, arg.Hashes)
	return err
}

const selectLink = `-- name: SelectLink :one
SELECT hash, original_url, correlation_id, user_id, is_deleted
FROM links
WHERE hash = $1
`

// SelectLink
//
//	SELECT hash, original_url, correlation_id, user_id, is_deleted
//	FROM links
//	WHERE hash = $1
func (q *Queries) SelectLink(ctx context.Context, hash string) (Link, error) {
	row := q.db.QueryRow(ctx, selectLink, hash)
	var i Link
	err := row.Scan(
		&i.Hash,
		&i.OriginalUrl,
		&i.CorrelationID,
		&i.UserID,
		&i.IsDeleted,
	)
	return i, err
}

const selectUserLinks = `-- name: SelectUserLinks :many
SELECT hash, original_url, correlation_id, user_id, is_deleted
FROM links
WHERE user_id = $1
`

// SelectUserLinks
//
//	SELECT hash, original_url, correlation_id, user_id, is_deleted
//	FROM links
//	WHERE user_id = $1
func (q *Queries) SelectUserLinks(ctx context.Context, userID string) ([]Link, error) {
	rows, err := q.db.Query(ctx, selectUserLinks, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Link{}
	for rows.Next() {
		var i Link
		if err := rows.Scan(
			&i.Hash,
			&i.OriginalUrl,
			&i.CorrelationID,
			&i.UserID,
			&i.IsDeleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
